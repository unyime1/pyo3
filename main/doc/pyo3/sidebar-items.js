initSidebarItems({"attr":[["pyclass","A proc macro used to expose Rust structs and fieldless enums as Python objects."],["pyfunction","A proc macro used to expose Rust functions to Python."],["pymethods","A proc macro used to expose methods to Python."],["pymodule","A proc macro used to implement Python modules."],["pyproto","A proc macro used to implement Python’s dunder methods."]],"derive":[["FromPyObject",""]],"fn":[["prepare_freethreaded_python","Prepares the use of Python in a free-threaded context."],["with_embedded_python_interpreter","Executes the provided closure with an embedded Python interpreter."]],"macro":[["append_to_inittab","Add the module to the initialization table in order to make embedded Python code to use it. Module name is the argument."],["create_exception","Defines a new exception type."],["import_exception","Defines a Rust type for an exception defined in Python code."],["intern","Interns `text` as a Python string and stores a reference to it in static storage."],["py_run","A convenient macro to execute a Python code snippet, with some local variables set."],["wrap_pyfunction","Wraps a Rust function annotated with `#[pyfunction]`."],["wrap_pymodule","Returns a function that takes a `Python` instance and returns a Python module."]],"mod":[["anyhow","A conversion from anyhow’s `Error` type to [`PyErr`]."],["buffer","`PyBuffer` implementation"],["class","Python object protocols"],["conversion","Defines conversions between Rust and Python types."],["exceptions","Exception types defined by Python."],["eyre","A conversion from eyre’s [`Report`] type to [`PyErr`]."],["ffi","Raw FFI declarations for Python’s C API."],["hashbrown","Conversions to and from hashbrown’s `HashMap` and `HashSet`."],["indexmap","Conversions to and from indexmap’s `IndexMap`."],["marker","Fundamental properties of objects tied to the Python interpreter."],["marshal","Support for the Python `marshal` format."],["num_bigint","Conversions to and from num-bigint’s [`BigInt`] and [`BigUint`] types."],["num_complex","Conversions to and from num-complex’ [`Complex`]`<`[`f32`]`>` and [`Complex`]`<`[`f64`]`>`."],["once_cell","A write-once cell mediated by the Python GIL."],["panic","Helper to convert Rust panics to Python exceptions."],["prelude","PyO3’s prelude."],["pycell","PyO3’s interior mutability primitive."],["pyclass","`PyClass` and related traits."],["pyclass_init","Contains initialization utilities for `#[pyclass]`."],["serde","Enables (de)serialization of [`Py`]`<T>` objects via serde."],["type_object","Python type object information"],["types","Various types defined by the Python interpreter such as `int`, `str` and `tuple`."]],"struct":[["GILGuard","RAII type that represents the Global Interpreter Lock acquisition."],["GILPool","A RAII pool which PyO3 uses to store owned Python references."],["Py","A GIL-independent reference to an object allocated on the Python heap."],["PyAny","Represents any Python object."],["PyDowncastError","Error that indicates a failure to convert a PyAny to a more specific Python type."],["PyErr","Represents a Python exception."],["PythonVersionInfo","Represents the major, minor, and patch (if any) versions of this interpreter."]],"trait":[["PyErrArguments","Helper conversion trait that allows to use custom arguments for lazy exception construction."],["PyNativeType","Types that are built into the Python interpreter."]],"type":[["PyObject","A commonly-used alias for `Py<PyAny>`."],["PyResult","Represents the result of a Python call."]]});